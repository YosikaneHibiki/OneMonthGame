//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project/InputAction/UIAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIAction"",
    ""maps"": [
        {
            ""name"": ""UIActionMap"",
            ""id"": ""cf17ba62-c0ec-432d-a6f1-acbcbf9d31f2"",
            ""actions"": [
                {
                    ""name"": ""LeftSelectAction"",
                    ""type"": ""Button"",
                    ""id"": ""3324f8a8-13bc-4613-86ec-3b923eb8f1ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSelectAction"",
                    ""type"": ""Button"",
                    ""id"": ""745455d5-6a55-4134-8748-0f7423d3350c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectAction"",
                    ""type"": ""Button"",
                    ""id"": ""0dd2c641-fc44-400a-9e47-75e89a0506eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a3f50a1-5b93-4ce7-8d6e-a28176de3414"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSelectAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86c9911a-05e2-45fe-b552-fe9a0319487c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSelectAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23bbb6b8-e4f6-4194-9bfa-ddbbb861d7de"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UIActionMap
        m_UIActionMap = asset.FindActionMap("UIActionMap", throwIfNotFound: true);
        m_UIActionMap_LeftSelectAction = m_UIActionMap.FindAction("LeftSelectAction", throwIfNotFound: true);
        m_UIActionMap_RightSelectAction = m_UIActionMap.FindAction("RightSelectAction", throwIfNotFound: true);
        m_UIActionMap_SelectAction = m_UIActionMap.FindAction("SelectAction", throwIfNotFound: true);
    }

    ~@UIAction()
    {
        UnityEngine.Debug.Assert(!m_UIActionMap.enabled, "This will cause a leak and performance issues, UIAction.UIActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIActionMap
    private readonly InputActionMap m_UIActionMap;
    private List<IUIActionMapActions> m_UIActionMapActionsCallbackInterfaces = new List<IUIActionMapActions>();
    private readonly InputAction m_UIActionMap_LeftSelectAction;
    private readonly InputAction m_UIActionMap_RightSelectAction;
    private readonly InputAction m_UIActionMap_SelectAction;
    public struct UIActionMapActions
    {
        private @UIAction m_Wrapper;
        public UIActionMapActions(@UIAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftSelectAction => m_Wrapper.m_UIActionMap_LeftSelectAction;
        public InputAction @RightSelectAction => m_Wrapper.m_UIActionMap_RightSelectAction;
        public InputAction @SelectAction => m_Wrapper.m_UIActionMap_SelectAction;
        public InputActionMap Get() { return m_Wrapper.m_UIActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUIActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Add(instance);
            @LeftSelectAction.started += instance.OnLeftSelectAction;
            @LeftSelectAction.performed += instance.OnLeftSelectAction;
            @LeftSelectAction.canceled += instance.OnLeftSelectAction;
            @RightSelectAction.started += instance.OnRightSelectAction;
            @RightSelectAction.performed += instance.OnRightSelectAction;
            @RightSelectAction.canceled += instance.OnRightSelectAction;
            @SelectAction.started += instance.OnSelectAction;
            @SelectAction.performed += instance.OnSelectAction;
            @SelectAction.canceled += instance.OnSelectAction;
        }

        private void UnregisterCallbacks(IUIActionMapActions instance)
        {
            @LeftSelectAction.started -= instance.OnLeftSelectAction;
            @LeftSelectAction.performed -= instance.OnLeftSelectAction;
            @LeftSelectAction.canceled -= instance.OnLeftSelectAction;
            @RightSelectAction.started -= instance.OnRightSelectAction;
            @RightSelectAction.performed -= instance.OnRightSelectAction;
            @RightSelectAction.canceled -= instance.OnRightSelectAction;
            @SelectAction.started -= instance.OnSelectAction;
            @SelectAction.performed -= instance.OnSelectAction;
            @SelectAction.canceled -= instance.OnSelectAction;
        }

        public void RemoveCallbacks(IUIActionMapActions instance)
        {
            if (m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActionMapActions @UIActionMap => new UIActionMapActions(this);
    public interface IUIActionMapActions
    {
        void OnLeftSelectAction(InputAction.CallbackContext context);
        void OnRightSelectAction(InputAction.CallbackContext context);
        void OnSelectAction(InputAction.CallbackContext context);
    }
}
